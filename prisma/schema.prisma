// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SuperAdmin {
  id        Int      @id @default(autoincrement())
  username  String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  email     String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("super_admin")
}

enum UserRole {
  ADMINGUDANG
  APOTEKER

}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  inventories Inventory[]
  transactions Transaction[]
  @@map("users")
}

model Product {
  id           Int         @id @default(autoincrement())
  name         String      @unique
  description  String?
  price        Decimal
  expiry_date  DateTime
  status       String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  category_id  Int
  Category     Category    @relation(fields: [category_id], references: [id])

  supplier_id  Int
  Supplier     Supplier    @relation(fields: [supplier_id], references: [id])

  inventories  Inventory[]
  transactions Transaction[]
  images       ProductImage[]

  @@map("products")
}
model Category {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  status      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  products    Product[]

  @@map("categories")
}

model Supplier {
  id          Int        @id @default(autoincrement())
  name        String
  contact     String
  address     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  products    Product[]

  @@map("suppliers")
}

model Transaction {
  id              Int       @id @default(autoincrement())
  product_id      Int
  quantity        Int
  total_price     Decimal
  transaction_date DateTime @default(now())
  user_id         Int
  User            User      @relation(fields: [user_id], references: [id])

  Product         Product   @relation(fields: [product_id], references: [id])

  @@map("transactions")
}

model Inventory {
  id          Int       @id @default(autoincrement())
  product_id  Int
  quantity    Int
  location    String
  warehouse_id Int
  note        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  created_by  Int

  Product     Product   @relation(fields: [product_id], references: [id])
  Warehouse   Warehouse @relation(fields: [warehouse_id], references: [id])
  User        User      @relation(fields: [created_by], references: [id])

  @@map("inventories")
}
 
model Warehouse {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  status      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  inventories Inventory[]

  @@map("warehouse")
}

model ProductImage {
  id          Int       @id @default(autoincrement())
  image       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  product_id  Int
  Product     Product   @relation(fields: [product_id], references: [id])

  @@map("product_images")
}

model Role {
  id        String   @id @default(uuid())
  name      String   @unique
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    Boolean  @default(true)

  @@map("roles")
}

